const int tam_ventana = 10;
int circularBuffer[tam_ventana];
int* circularBufferAccessor = circularBuffer;
 
int muestras[] = {
0.20,
 1.10,
 0.20,
 0.80,
 0.20,
 0.20,
 0.80,
 0.80,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.80,
 0.20,
 0.20,
 1.50,
 0.20,
 1.50,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.80,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.80,
 1.50,
 0.80,
 2.10,
 0.20,
 0.20,
 1.50,
 1.50,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.80,
 0.80,
 0.20,
 0.20,
 0.20,
 2.10,
 0.80,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.80,
 2.10,
 2.10,
 0.80,
 0.20,
 0.20,
 0.80,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 1.50,
 2.10,
 0.20,
 1.50,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 0.80,
 0.20,
 0.80,
 0.20,
 0.20,
 0.20,
 0.20,
 0.80,
 1.50,
 0.80,
 0.20,
 0.20,
 2.10,
 2.10,
 1.50,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 1.50,
 2.10,
 0.20,
 0.20,
 0.20,
 1.50,
 0.80,
 0.20,
 0.20,
 0.80,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 3.40,
 2.10,
 2.10,
 2.10,
 2.10,
 2.10,
 0.20,
 2.10,
 0.80,
 0.20,
 2.10,
 0.20,
 2.10,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 1.90,
 0.20,
 0.20,
 2.10,
 2.80,
 0.20,
 0.20,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.80,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 1.50,
 2.10,
 0.20,
 2.10,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 4.50,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 4.60,
 3.60,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 2.10,
 2.10,
 2.10,
 0.20,
 2.10,
 0.20,
 2.10,
 3.60,
 0.20,
 2.10,
 2.10,
 0.80,
 1.40,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.80,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 2.10,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 3.40,
 2.10,
 0.20,
 2.10,
 0.80,
 4.60,
 0.80,
 0.20,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 3.00,
 0.20,
 2.10,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 3.90,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 0.20,
 2.10,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 1.50,
 1.50,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 2.10,
 2.10,
 0.80,
 4.70,
 0.20,
 2.10,
 2.10,
 2.10,
 2.10,
 0.20,
 0.20,
 2.10,
 2.90,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 1.50,
 0.20,
 0.20,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10,
 0.20,
 0.20,
 0.20,
 2.10,
 2.10

} ;
int muestras_length = sizeof(muestras) / sizeof(int);
 
int getMeasure()
{
  int static index = 0;
  index++;
  return muestras[index - 1];
}
 
int appendToBuffer(int value)
{
  *circularBufferAccessor = value;
  circularBufferAccessor++;
  if (circularBufferAccessor >= circularBuffer + tam_ventana) 
    circularBufferAccessor = circularBuffer;
}
 
long sum;
int elementCount;
float mean;
float AddValue(int value)
{
  sum -= *circularBufferAccessor;
  sum += value;
  appendToBuffer(value);
 
  if (elementCount < tam_ventana)
    ++elementCount;
  return (float) sum / elementCount;
}
 
void setup()
{
  Serial.begin(115200);
 
  for (int iCount = 0; iCount < muestras_length; iCount++)
  {
    float med = AddValue(getMeasure());
    Serial.print(muestras[iCount]);
    Serial.print(",\t");
    Serial.println(med);
  }
}
 
void loop()
{
}
